# {{PROJECT_NAME}} - Laravel Project Commands
.PHONY: help start stop restart build logs shell artisan composer npm status backup import setup fresh queue-work queue-stop cache-clear optimize install-app

# Colors
GREEN = \033[32m
CYAN = \033[36m
YELLOW = \033[33m
RED = \033[31m
PURPLE = \033[35m
RESET = \033[0m

.DEFAULT_GOAL := help

## Help
help:
	@echo "$(CYAN)üöÄ {{PROJECT_NAME}} - Laravel GodMode Commands$(RESET)"
	@echo ""
	@echo "$(GREEN)üê≥ Container Management:$(RESET)"
	@echo "  make start         - Start all containers"
	@echo "  make stop          - Stop all containers"
	@echo "  make restart       - Restart all containers"
	@echo "  make build         - Build containers from scratch"
	@echo "  make logs          - Show container logs"
	@echo "  make status        - Show container status"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è  Development:$(RESET)"
	@echo "  make shell         - Open application shell"
	@echo "  make setup         - Initial Laravel setup"
	@echo "  make fresh         - Fresh install with sample data"
	@echo "  make install-app   - Install/update dependencies"
	@echo ""
	@echo "$(GREEN)üé® Laravel Commands:$(RESET)"
	@echo "  make artisan       - Run artisan command (e.g., make artisan CMD='migrate')"
	@echo "  make migrate       - Run database migrations"
	@echo "  make migrate-fresh - Fresh migrations with seeders"
	@echo "  make seed          - Run database seeders"
	@echo "  make tinker        - Open Laravel Tinker"
	@echo ""
	@echo "$(GREEN)‚ö° Performance & Cache:$(RESET)"
	@echo "  make cache-clear   - Clear all Laravel caches"
	@echo "  make optimize      - Optimize Laravel (production ready)"
	@echo "  make config-cache  - Cache configuration files"
	@echo "  make route-cache   - Cache routes"
	@echo "  make view-cache    - Cache views"
	@echo ""
	@echo "$(GREEN)üöÄ Queue Management:$(RESET)"
	@echo "  make queue-work    - Start queue worker"
	@echo "  make queue-stop    - Stop all queue workers"
	@echo "  make queue-retry   - Retry failed jobs"
	@echo "  make queue-clear   - Clear all jobs"
	@echo ""
	@echo "$(GREEN)üì¶ Package Management:$(RESET)"
	@echo "  make composer      - Run composer command"
	@echo "  make npm           - Run npm command"
	@echo "  make yarn          - Run yarn command"
	@echo "  make bun           - Run bun command"
	@echo ""
	@echo "$(GREEN)üóÑÔ∏è  Database:$(RESET)"
	@echo "  make backup        - Backup database"
	@echo "  make import        - Import latest SQL file"
	@echo "  make db-shell      - Open database shell"
	@echo "  make db-reset      - Reset database (fresh + seed)"
	@echo ""
	@echo "$(GREEN)üîß Utilities:$(RESET)"
	@echo "  make test          - Run PHPUnit tests"
	@echo "  make pint          - Run Laravel Pint (code style)"
	@echo "  make phpstan       - Run PHPStan (static analysis)"
	@echo "  make ide-helper    - Generate IDE helper files"
	@echo ""

## Container Management
start:
	@echo "$(CYAN)üöÄ Starting {{PROJECT_NAME}}...$(RESET)"
	@docker-compose up -d
	@echo "$(GREEN)‚úÖ {{PROJECT_NAME}} started!$(RESET)"
	@echo "$(CYAN)üåê App: http://localhost:{{APP_PORT}}$(RESET)"
	@if [ "{{PHPMYADMIN_PORT}}" != "" ]; then echo "$(CYAN)üóÑÔ∏è  PHPMyAdmin: http://localhost:{{PHPMYADMIN_PORT}}$(RESET)"; fi
	@if [ "{{MAILHOG_PORT}}" != "" ]; then echo "$(CYAN)üìß MailHog: http://localhost:{{MAILHOG_PORT}}$(RESET)"; fi

stop:
	@echo "$(CYAN)‚èπÔ∏è Stopping {{PROJECT_NAME}}...$(RESET)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ {{PROJECT_NAME}} stopped!$(RESET)"

restart: stop start

build:
	@echo "$(CYAN)üî® Building {{PROJECT_NAME}}...$(RESET)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Build complete!$(RESET)"

logs:
	@docker-compose logs -f --tail=100

status:
	@echo "$(CYAN)üìä {{PROJECT_NAME}} Status:$(RESET)"
	@docker-compose ps

## Development
shell:
	@echo "$(CYAN)üêö Opening application shell...$(RESET)"
	@docker-compose exec app /bin/bash

setup:
	@echo "$(CYAN)üîß Setting up Laravel application...$(RESET)"
	@docker-compose exec app composer install --no-dev --optimize-autoloader
	@docker-compose exec app php artisan key:generate --force
	@docker-compose exec app php artisan storage:link
	@docker-compose exec app php artisan config:cache
	@docker-compose exec app php artisan route:cache
	@docker-compose exec app php artisan view:cache
	@docker-compose exec app npm install
	@docker-compose exec app npm run build
	@echo "$(GREEN)‚úÖ Laravel setup complete!$(RESET)"

fresh:
	@echo "$(CYAN)üå± Fresh Laravel installation with sample data...$(RESET)"
	@docker-compose exec app php artisan migrate:fresh --seed --force
	@docker-compose exec app php artisan db:seed --force
	@make cache-clear
	@echo "$(GREEN)‚úÖ Fresh installation complete!$(RESET)"

install-app:
	@echo "$(CYAN)üì¶ Installing/updating dependencies...$(RESET)"
	@docker-compose exec app composer install
	@docker-compose exec app npm install
	@echo "$(GREEN)‚úÖ Dependencies updated!$(RESET)"

## Laravel Commands
artisan:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make artisan CMD='command'$(RESET)"; \
		echo "$(YELLOW)Example: make artisan CMD='make:controller UserController'$(RESET)"; \
	else \
		echo "$(CYAN)üé® Running: php artisan $(CMD)$(RESET)"; \
		docker-compose exec app php artisan $(CMD); \
	fi

migrate:
	@echo "$(CYAN)üîÑ Running database migrations...$(RESET)"
	@docker-compose exec app php artisan migrate --force

migrate-fresh:
	@echo "$(CYAN)üÜï Fresh migrations with seeders...$(RESET)"
	@docker-compose exec app php artisan migrate:fresh --seed --force

seed:
	@echo "$(CYAN)üå± Running database seeders...$(RESET)"
	@docker-compose exec app php artisan db:seed --force

tinker:
	@echo "$(CYAN)‚ú® Opening Laravel Tinker...$(RESET)"
	@docker-compose exec app php artisan tinker

## Performance & Cache
cache-clear:
	@echo "$(CYAN)üßπ Clearing all Laravel caches...$(RESET)"
	@docker-compose exec app php artisan optimize:clear
	@echo "$(GREEN)‚úÖ All caches cleared!$(RESET)"

optimize:
	@echo "$(CYAN)‚ö° Optimizing Laravel for production...$(RESET)"
	@docker-compose exec app php artisan optimize
	@docker-compose exec app composer dump-autoload --optimize
	@echo "$(GREEN)‚úÖ Laravel optimized!$(RESET)"

config-cache:
	@echo "$(CYAN)‚öôÔ∏è Caching configuration...$(RESET)"
	@docker-compose exec app php artisan config:cache

route-cache:
	@echo "$(CYAN)üõ£Ô∏è Caching routes...$(RESET)"
	@docker-compose exec app php artisan route:cache

view-cache:
	@echo "$(CYAN)üëÅÔ∏è Caching views...$(RESET)"
	@docker-compose exec app php artisan view:cache

## Queue Management
queue-work:
	@echo "$(CYAN)üöÄ Starting queue worker...$(RESET)"
	@docker-compose exec -d app php artisan queue:work --sleep=3 --tries=3 --max-time=3600

queue-stop:
	@echo "$(CYAN)‚èπÔ∏è Stopping queue workers...$(RESET)"
	@docker-compose exec app php artisan queue:restart

queue-retry:
	@echo "$(CYAN)üîÑ Retrying failed jobs...$(RESET)"
	@docker-compose exec app php artisan queue:retry all

queue-clear:
	@echo "$(CYAN)üóëÔ∏è Clearing all jobs...$(RESET)"
	@docker-compose exec app php artisan queue:clear

## Package Management
composer:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make composer CMD='command'$(RESET)"; \
		echo "$(YELLOW)Example: make composer CMD='require laravel/sanctum'$(RESET)"; \
	else \
		echo "$(CYAN)üì¶ Running: composer $(CMD)$(RESET)"; \
		docker-compose exec app composer $(CMD); \
	fi

npm:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make npm CMD='command'$(RESET)"; \
		echo "$(YELLOW)Example: make npm CMD='run dev'$(RESET)"; \
	else \
		echo "$(CYAN)üì¶ Running: npm $(CMD)$(RESET)"; \
		docker-compose exec app npm $(CMD); \
	fi

yarn:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make yarn CMD='command'$(RESET)"; \
	else \
		echo "$(CYAN)üì¶ Running: yarn $(CMD)$(RESET)"; \
		docker-compose exec app yarn $(CMD); \
	fi

bun:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make bun CMD='command'$(RESET)"; \
	else \
		echo "$(CYAN)ÔøΩ Running: bun $(CMD)$(RESET)"; \
		docker-compose exec app bun $(CMD); \
	fi

## Database
backup:
	@echo "$(CYAN)üíæ Creating database backup...$(RESET)"
	@mkdir -p sqlback
	@docker-compose exec db mysqldump -u root -ppassword {{PROJECT_NAME}} > sqlback/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Database backed up to sqlback/ folder$(RESET)"
	@ls -la sqlback/ | tail -5

import:
	@echo "$(CYAN)üì• Importing latest SQL file...$(RESET)"
	@if [ ! -d "sqlback" ]; then \
		echo "$(RED)‚ùå sqlback/ folder not found. Please create it and add SQL files.$(RESET)"; \
		exit 1; \
	fi
	@LATEST_SQL=$$(ls -t sqlback/*.sql 2>/dev/null | head -n1); \
	if [ -z "$$LATEST_SQL" ]; then \
		echo "$(RED)‚ùå No SQL files found in sqlback/ folder$(RESET)"; \
		exit 1; \
	else \
		DB_NAME=$$(docker-compose exec -T db mysql -u root -ppassword -e "SHOW DATABASES;" 2>/dev/null | grep -v -E "^(Database|information_schema|performance_schema|mysql|sys)$$" | head -n1 | tr -d '\r'); \
		if [ -z "$$DB_NAME" ]; then \
			echo "$(RED)‚ùå No application database found$(RESET)"; \
			exit 1; \
		fi; \
		echo "$(CYAN)üì• Importing: $$LATEST_SQL into database: $$DB_NAME$(RESET)"; \
		docker-compose exec -T db mysql -u root -ppassword "$$DB_NAME" < "$$LATEST_SQL"; \
		echo "$(GREEN)‚úÖ SQL file imported successfully!$(RESET)"; \
	fi

db-drop:
	@echo "$(YELLOW)üóëÔ∏è Dropping and recreating database...$(RESET)"
	@DB_NAME=$$(docker-compose exec -T db mysql -u root -ppassword -e "SHOW DATABASES;" 2>/dev/null | grep -v -E "^(Database|information_schema|performance_schema|mysql|sys)$$" | head -n1 | tr -d '\r'); \
	if [ -z "$$DB_NAME" ]; then \
		echo "$(RED)‚ùå No application database found$(RESET)"; \
		exit 1; \
	else \
		echo "$(YELLOW)üóëÔ∏è Dropping database: $$DB_NAME$(RESET)"; \
		docker-compose exec -T db mysql -u root -ppassword -e "DROP DATABASE IF EXISTS \`$$DB_NAME\`; CREATE DATABASE \`$$DB_NAME\`;" 2>/dev/null; \
		echo "$(GREEN)‚úÖ Database $$DB_NAME dropped and recreated successfully!$(RESET)"; \
	fi

refresh:
	@echo "$(CYAN)üîÑ Refreshing database (drop tables + import)...$(RESET)"
	@make db-drop
	@make import
	@echo "$(GREEN)‚úÖ Database refreshed successfully!$(RESET)"

db-shell:
	@echo "$(CYAN)üóÑÔ∏è Opening database shell...$(RESET)"
	@docker-compose exec db mysql -u root -ppassword {{PROJECT_NAME}}

db-reset:
	@echo "$(CYAN)üîÑ Resetting database...$(RESET)"
	@make migrate-fresh
	@echo "$(GREEN)‚úÖ Database reset complete!$(RESET)"

## Development Tools
test:
	@echo "$(CYAN)üß™ Running PHPUnit tests...$(RESET)"
	@docker-compose exec app php artisan test

pint:
	@echo "$(CYAN)üé® Running Laravel Pint (code formatting)...$(RESET)"
	@docker-compose exec app ./vendor/bin/pint

phpstan:
	@echo "$(CYAN)üîç Running PHPStan (static analysis)...$(RESET)"
	@docker-compose exec app ./vendor/bin/phpstan analyse

ide-helper:
	@echo "$(CYAN)üí° Generating IDE helper files...$(RESET)"
	@docker-compose exec app php artisan ide-helper:generate
	@docker-compose exec app php artisan ide-helper:models --write
	@docker-compose exec app php artisan ide-helper:meta
	@echo "$(GREEN)‚úÖ IDE helpers generated!$(RESET)"

## Development Shortcuts
dev:
	@echo "$(CYAN)üîß Starting development environment...$(RESET)"
	@make start
	@echo "$(YELLOW)‚è±Ô∏è Waiting for containers to be ready...$(RESET)"
	@sleep 5
	@make install-app
	@make cache-clear
	@echo "$(GREEN)‚úÖ Development environment ready!$(RESET)"
	@echo "$(PURPLE)üöÄ Happy coding!$(RESET)"

prod:
	@echo "$(CYAN)üöÄ Preparing for production...$(RESET)"
	@make setup
	@make optimize
	@make test
	@echo "$(GREEN)‚úÖ Production build complete!$(RESET)"

## Laravel GodMode Integration
godmode-status:
	@echo "$(CYAN)üìä Laravel GodMode Status Check$(RESET)"
	@echo "$(GREEN)Services:$(RESET)"
	@docker-compose ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "$(GREEN)Queue Workers:$(RESET)"
	@docker-compose exec app php artisan queue:monitor 2>/dev/null || echo "No queue workers running"
	@echo ""
	@echo "$(GREEN)Cache Status:$(RESET)"
	@docker-compose exec app php artisan config:show cache.default 2>/dev/null || echo "Cache driver: file"

godmode-info:
	@echo "$(CYAN)‚ÑπÔ∏è  Laravel GodMode Project Info$(RESET)"
	@echo "$(GREEN)Project:$(RESET) {{PROJECT_NAME}}"
	@echo "$(GREEN)Laravel Version:$(RESET) $$(docker-compose exec app php artisan --version 2>/dev/null || echo 'Unknown')"
	@echo "$(GREEN)PHP Version:$(RESET) $$(docker-compose exec app php -v | head -n1 || echo 'Unknown')"
	@echo "$(GREEN)Composer Packages:$(RESET) $$(docker-compose exec app composer show --direct 2>/dev/null | wc -l || echo '0') packages"
	@echo "$(GREEN)NPM Packages:$(RESET) $$(docker-compose exec app npm list --depth=0 2>/dev/null | grep -c '‚îú‚îÄ‚îÄ\\|‚îî‚îÄ‚îÄ' || echo '0') packages"
